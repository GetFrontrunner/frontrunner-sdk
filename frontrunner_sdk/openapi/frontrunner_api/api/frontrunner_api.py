# flake8: noqa
# isort: skip_file
# coding: utf-8

"""
    Frontrunner Market Maker

    This is a first draft of the FR External Market Maker API  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from frontrunner_sdk.openapi.frontrunner_api.api_client import ApiClient


class FrontrunnerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_leagues(self, **kwargs):  # noqa: E501
        """Get Frontrunner Sports Leagues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leagues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner League id
        :param str sport:
        :return: list[League]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leagues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_leagues_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_leagues_with_http_info(self, **kwargs):  # noqa: E501
        """Get Frontrunner Sports Leagues  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leagues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner League id
        :param str sport:
        :return: list[League]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sport']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leagues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'sport' in params:
            query_params.append(('sport', params['sport']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/leagues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[League]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_markets(self, **kwargs):  # noqa: E501
        """Get Frontrunner Markets  # noqa: E501

        `status` default is `active` if not provided. If `status` is provided as not `active`, one of `id`, `injectiveId`, `propId`, or `eventId` must be provided as well  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_markets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner Market id
        :param str injective_id: Injective market id
        :param str prop_id: Frontrunner Prop id
        :param str event_id: Frontrunner SportEvent id
        :param str league_id: Frontrunner League id
        :param MarketStatus status: Frontrunner Market status
        :return: list[Market]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_markets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_markets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_markets_with_http_info(self, **kwargs):  # noqa: E501
        """Get Frontrunner Markets  # noqa: E501

        `status` default is `active` if not provided. If `status` is provided as not `active`, one of `id`, `injectiveId`, `propId`, or `eventId` must be provided as well  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_markets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner Market id
        :param str injective_id: Injective market id
        :param str prop_id: Frontrunner Prop id
        :param str event_id: Frontrunner SportEvent id
        :param str league_id: Frontrunner League id
        :param MarketStatus status: Frontrunner Market status
        :return: list[Market]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'injective_id', 'prop_id', 'event_id', 'league_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_markets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'injective_id' in params:
            query_params.append(('injectiveId', params['injective_id']))  # noqa: E501
        if 'prop_id' in params:
            query_params.append(('propId', params['prop_id']))  # noqa: E501
        if 'event_id' in params:
            query_params.append(('eventId', params['event_id']))  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/markets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Market]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_props(self, **kwargs):  # noqa: E501
        """Get Frontrunner Props  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_props(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner Prop id
        :param str league_id: Frontrunner League id
        :return: list[Prop]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_props_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_props_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_props_with_http_info(self, **kwargs):  # noqa: E501
        """Get Frontrunner Props  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_props_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner Prop id
        :param str league_id: Frontrunner League id
        :return: list[Prop]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'league_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_props" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/props', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Prop]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sport_entities(self, **kwargs):  # noqa: E501
        """Get list of Frontrunner SportEntity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sport_entities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner SportEntity id
        :param str sport:
        :param str league_id:
        :return: list[SportEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sport_entities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sport_entities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sport_entities_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of Frontrunner SportEntity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sport_entities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner SportEntity id
        :param str sport:
        :param str league_id:
        :return: list[SportEntity]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sport', 'league_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sport_entities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'sport' in params:
            query_params.append(('sport', params['sport']))  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sportEntities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SportEntity]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sport_events(self, **kwargs):  # noqa: E501
        """Get list of Frontrunner SportEvent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sport_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner SportEvent id
        :param str sport:
        :param str league_id:
        :param datetime starts_since: The minimum start time to return
        :return: list[SportEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sport_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sport_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sport_events_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of Frontrunner SportEvent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sport_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Frontrunner SportEvent id
        :param str sport:
        :param str league_id:
        :param datetime starts_since: The minimum start time to return
        :return: list[SportEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sport', 'league_id', 'starts_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sport_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'sport' in params:
            query_params.append(('sport', params['sport']))  # noqa: E501
        if 'league_id' in params:
            query_params.append(('leagueId', params['league_id']))  # noqa: E501
        if 'starts_since' in params:
            query_params.append(('startsSince', params['starts_since']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sportEvents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SportEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
